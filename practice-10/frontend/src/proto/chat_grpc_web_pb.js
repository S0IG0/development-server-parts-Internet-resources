/**
 * @fileoverview gRPC-Web generated client stub for messenger
 * @enhanceable
 * @public
 */

// Code generated by protoc-gen-grpc-web. DO NOT EDIT.
// versions:
// 	protoc-gen-grpc-web v1.4.2
// 	protoc              v4.24.3
// source: proto/chat.proto


/* eslint-disable */
// @ts-nocheck



const grpc = {};
grpc.web = require('grpc-web');

const proto = {};
proto.messenger = require('./chat_pb.js');

/**
 * @param {string} hostname
 * @param {?Object} credentials
 * @param {?grpc.web.ClientOptions} options
 * @constructor
 * @struct
 * @final
 */
proto.messenger.UserServiceClient =
    function(hostname, credentials, options) {
  if (!options) options = {};
  options.format = 'text';

  /**
   * @private @const {!grpc.web.GrpcWebClientBase} The client
   */
  this.client_ = new grpc.web.GrpcWebClientBase(options);

  /**
   * @private @const {string} The hostname
   */
  this.hostname_ = hostname.replace(/\/+$/, '');

};


/**
 * @param {string} hostname
 * @param {?Object} credentials
 * @param {?grpc.web.ClientOptions} options
 * @constructor
 * @struct
 * @final
 */
proto.messenger.UserServicePromiseClient =
    function(hostname, credentials, options) {
  if (!options) options = {};
  options.format = 'text';

  /**
   * @private @const {!grpc.web.GrpcWebClientBase} The client
   */
  this.client_ = new grpc.web.GrpcWebClientBase(options);

  /**
   * @private @const {string} The hostname
   */
  this.hostname_ = hostname.replace(/\/+$/, '');

};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.messenger.UserRequest,
 *   !proto.messenger.JwtResponse>}
 */
const methodDescriptor_UserService_RegisterUser = new grpc.web.MethodDescriptor(
  '/messenger.UserService/RegisterUser',
  grpc.web.MethodType.UNARY,
  proto.messenger.UserRequest,
  proto.messenger.JwtResponse,
  /**
   * @param {!proto.messenger.UserRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.messenger.JwtResponse.deserializeBinary
);


/**
 * @param {!proto.messenger.UserRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.messenger.JwtResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.messenger.JwtResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.messenger.UserServiceClient.prototype.registerUser =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/messenger.UserService/RegisterUser',
      request,
      metadata || {},
      methodDescriptor_UserService_RegisterUser,
      callback);
};


/**
 * @param {!proto.messenger.UserRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.messenger.JwtResponse>}
 *     Promise that resolves to the response
 */
proto.messenger.UserServicePromiseClient.prototype.registerUser =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/messenger.UserService/RegisterUser',
      request,
      metadata || {},
      methodDescriptor_UserService_RegisterUser);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.messenger.UserRequest,
 *   !proto.messenger.JwtResponse>}
 */
const methodDescriptor_UserService_LoginUser = new grpc.web.MethodDescriptor(
  '/messenger.UserService/LoginUser',
  grpc.web.MethodType.UNARY,
  proto.messenger.UserRequest,
  proto.messenger.JwtResponse,
  /**
   * @param {!proto.messenger.UserRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.messenger.JwtResponse.deserializeBinary
);


/**
 * @param {!proto.messenger.UserRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.messenger.JwtResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.messenger.JwtResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.messenger.UserServiceClient.prototype.loginUser =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/messenger.UserService/LoginUser',
      request,
      metadata || {},
      methodDescriptor_UserService_LoginUser,
      callback);
};


/**
 * @param {!proto.messenger.UserRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.messenger.JwtResponse>}
 *     Promise that resolves to the response
 */
proto.messenger.UserServicePromiseClient.prototype.loginUser =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/messenger.UserService/LoginUser',
      request,
      metadata || {},
      methodDescriptor_UserService_LoginUser);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.messenger.RefreshToken,
 *   !proto.messenger.AccessToken>}
 */
const methodDescriptor_UserService_UpdateAccessToken = new grpc.web.MethodDescriptor(
  '/messenger.UserService/UpdateAccessToken',
  grpc.web.MethodType.UNARY,
  proto.messenger.RefreshToken,
  proto.messenger.AccessToken,
  /**
   * @param {!proto.messenger.RefreshToken} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.messenger.AccessToken.deserializeBinary
);


/**
 * @param {!proto.messenger.RefreshToken} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.messenger.AccessToken)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.messenger.AccessToken>|undefined}
 *     The XHR Node Readable Stream
 */
proto.messenger.UserServiceClient.prototype.updateAccessToken =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/messenger.UserService/UpdateAccessToken',
      request,
      metadata || {},
      methodDescriptor_UserService_UpdateAccessToken,
      callback);
};


/**
 * @param {!proto.messenger.RefreshToken} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.messenger.AccessToken>}
 *     Promise that resolves to the response
 */
proto.messenger.UserServicePromiseClient.prototype.updateAccessToken =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/messenger.UserService/UpdateAccessToken',
      request,
      metadata || {},
      methodDescriptor_UserService_UpdateAccessToken);
};


/**
 * @param {string} hostname
 * @param {?Object} credentials
 * @param {?grpc.web.ClientOptions} options
 * @constructor
 * @struct
 * @final
 */
proto.messenger.MessageServiceClient =
    function(hostname, credentials, options) {
  if (!options) options = {};
  options.format = 'text';

  /**
   * @private @const {!grpc.web.GrpcWebClientBase} The client
   */
  this.client_ = new grpc.web.GrpcWebClientBase(options);

  /**
   * @private @const {string} The hostname
   */
  this.hostname_ = hostname.replace(/\/+$/, '');

};


/**
 * @param {string} hostname
 * @param {?Object} credentials
 * @param {?grpc.web.ClientOptions} options
 * @constructor
 * @struct
 * @final
 */
proto.messenger.MessageServicePromiseClient =
    function(hostname, credentials, options) {
  if (!options) options = {};
  options.format = 'text';

  /**
   * @private @const {!grpc.web.GrpcWebClientBase} The client
   */
  this.client_ = new grpc.web.GrpcWebClientBase(options);

  /**
   * @private @const {string} The hostname
   */
  this.hostname_ = hostname.replace(/\/+$/, '');

};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.messenger.Empty,
 *   !proto.messenger.Message>}
 */
const methodDescriptor_MessageService_JoinChannel = new grpc.web.MethodDescriptor(
  '/messenger.MessageService/JoinChannel',
  grpc.web.MethodType.SERVER_STREAMING,
  proto.messenger.Empty,
  proto.messenger.Message,
  /**
   * @param {!proto.messenger.Empty} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.messenger.Message.deserializeBinary
);


/**
 * @param {!proto.messenger.Empty} request The request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!grpc.web.ClientReadableStream<!proto.messenger.Message>}
 *     The XHR Node Readable Stream
 */
proto.messenger.MessageServiceClient.prototype.joinChannel =
    function(request, metadata) {
  return this.client_.serverStreaming(this.hostname_ +
      '/messenger.MessageService/JoinChannel',
      request,
      metadata || {},
      methodDescriptor_MessageService_JoinChannel);
};


/**
 * @param {!proto.messenger.Empty} request The request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!grpc.web.ClientReadableStream<!proto.messenger.Message>}
 *     The XHR Node Readable Stream
 */
proto.messenger.MessageServicePromiseClient.prototype.joinChannel =
    function(request, metadata) {
  return this.client_.serverStreaming(this.hostname_ +
      '/messenger.MessageService/JoinChannel',
      request,
      metadata || {},
      methodDescriptor_MessageService_JoinChannel);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.messenger.Message,
 *   !proto.messenger.Info>}
 */
const methodDescriptor_MessageService_SendMessage = new grpc.web.MethodDescriptor(
  '/messenger.MessageService/SendMessage',
  grpc.web.MethodType.UNARY,
  proto.messenger.Message,
  proto.messenger.Info,
  /**
   * @param {!proto.messenger.Message} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.messenger.Info.deserializeBinary
);


/**
 * @param {!proto.messenger.Message} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.messenger.Info)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.messenger.Info>|undefined}
 *     The XHR Node Readable Stream
 */
proto.messenger.MessageServiceClient.prototype.sendMessage =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/messenger.MessageService/SendMessage',
      request,
      metadata || {},
      methodDescriptor_MessageService_SendMessage,
      callback);
};


/**
 * @param {!proto.messenger.Message} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.messenger.Info>}
 *     Promise that resolves to the response
 */
proto.messenger.MessageServicePromiseClient.prototype.sendMessage =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/messenger.MessageService/SendMessage',
      request,
      metadata || {},
      methodDescriptor_MessageService_SendMessage);
};


module.exports = proto.messenger;

